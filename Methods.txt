/*

void PrintArray(int [] array){
    Console.WriteLine($"[{string.Join(", ", array)}]");
}

void Print (string text){ 
   Console.WriteLine(text);
}

int GetNumber(string description){
    int number;
    Console.Write($"{description} => ");
    while(true){
        string? temp = Console.ReadLine();
        if(int.TryParse(temp, out number)){
            return number;
        }
        Console.Write($"This number {temp} is not correct. Try again. => ");
    }
}


Array
_______________________________________________________

void PrintArray(int [] array){
    Console.WriteLine($"[{string.Join(", ", array)}]");
}

int[] GetRandomArray(int length, int min, int max){ 
    int[] array = new int [length];
    Random rand = new Random();
    for (int i = 0; i < length; i++)
    {
        array[i] = rand.Next(min, max);
    }
    Print($"Random massive of {length} elements is: ");
    PrintArray(array);
    return array;
}

int CountEvenNumbersCount(int [] array){
    int count = 0;
    for (int i = 0; i < array.Length; i++)
    {
        if(array[i]%2 == 0)
            count+=1;
    }
    return count;
}

int CountEvenPosNumbers(int [] array){
    int sum = 0;
    for (int i = 0; i < array.Length; i++){
        if(i%2 != 0){
            sum+=array[i];
        }
    }
    return sum;
}

double[] GetRandomRealArray(int length, int min, int max){ 
    double[] array = new double [length];
    Random rand = new Random();
    for (int i = 0; i < length; i++)
    {
        array[i] = Math.Round((rand.NextDouble() * rand.Next(min,max+1)),2);
    }
    Print($"Random massive of real numbers with {length} elements is: ");
    PrintArray(array);
    return array;
}

double [] BubbleSort (double [] array){
    double temp = 0;
    for (int i = 0; i < array.Length; i++) {
        for (int j = 0; j < array.Length - 1; j++) {
            if (array[j] > array[j + 1]) {
                temp = array[j + 1];
                array[j + 1] = array[j];
                array[j] = temp;
            }
        }
    }
    Print("Sorted massive:");
    PrintArray(array);
    return array;
}

double GetDifference (double [] array){
    return Math.Round((array[array.Length-1] - array[0]),2);
}

//Найдите сумму отрицательных и положительных элементов массива. 
Использование кортежа (или tuple):

(int sumNegName, int sumPosName) FindNegPos (int [] array){
    int sumNeg = 0;
    int sumPos = 0;
    foreach (int el in array)
    {
        sumPos+= el > 0 ? el:0;
        sumNeg+= el < 0 ? el:0;
    }

    return (sumNegName: sumNeg, sumPosName: sumPos);
}

var tuple = FindNegPos(array);
Console.WriteLine($"Sum negative is {tuple.sumNegName} and sum positive is {tuple.sumPosName}");

------------------------------------------------------------------

void ReverseDigints (int [] array){
    for (int i = 0; i < array.Length; i++)
    {
        array[i]*=-1; 
    }
    Console.WriteLine($"[{string.Join(", ", array)}]");
}

bool SearchNumber (int number, int [] array){
    for (int i = 0; i < array.Length; i++)
    {
        if(array[i] == number){
            return true;
        }
    }
    return false;
}

string answer = SearchNumber(number, arr) ? "yes" : "no";

---------------------------------------------------------------------

int GetDigits(int [] array){
    int count =0;
    for (int i = 0; i < array.Length; i++)
    {
        if (array[i] >= 10 && array[i] <= 99){
            count+=1;
        } 
    }
    return count;
}

int GetSum(int number){
    int sum = 0;
    for(int i = 1; i<=number; i++){
        sum+=i;
    }
    return sum;
}
-------------------------------------
//Кол-во цифр в числе:
int count = (int)Math.Log10(number)+1;


int DigitsNumber(int number)
{
    int count = 0;
    while (number > 0)
    {
        number /= 10; // Отбрасываем последнюю цифру, меняем разрядность.
        count++;
    }
    return count;
}
---------------------------------------

void FillArray(int[] array){
    int length = array.Length;
    int index = 0;
    while(index<length){
        array[index] = new Random().Next(0, 2);
        index ++;
    }
    Console.WriteLine($"[{string.Join(", ", array)}]");
}


int GetReverseNumber(int number){
    int numberToReverse = number;
    int reverse = 0;
    while (numberToReverse > 0){
        reverse = reverse*10 + numberToReverse%10;
        numberToReverse/=10;
    }
    return reverse;
}


DoubleArray
___________________________________________________

int [,] CreateRandomMatrix(int row, int col, int min, int max){
    Random rand = new Random();
    int [,] array = new int [row,col];
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            array[i,j] = rand.Next(min,max+1);
        }
    }
    return array;
}


void PrintMatrix(int [,] array){
    int row = array.GetLength(0);
    int col = array.GetLength(1);
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            Console.Write($"{array [i,j]}\t");
        }
        Console.WriteLine();
    }
}


Recursia
_______________________________________________

int Factorial(int n)
{
 // 1! = 1
 // 0! = 1
 if(n == 1) return 1;
 else return n * Factorial(n-1);
}
Console.WriteLine(Factorial(3)); // 1 * 2 * 3 = 6



int Fibonacci(int n)
{
 if(n == 0 || n == 1) return n;
 else return Fibonacci(n-1) + Fibonacci(n-2);
}
for (int i = 0; i <=5; i++)
{
 Console.WriteLine(Fibonacci(i));
}

___________________________________________________________
2d matrix

int [,] CreateArray(int row, int col, int min, int max){
    Random rand = new Random();
    int [,] array = new int [row,col];
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            array[i,j] = rand.Next(min,max+1);
        }
    }
    return array;
}

void PrintArray(int [,] array){
    int row = array.GetLength(0);
    int col = array.GetLength(1);
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            Console.Write($"{array [i,j]}\t");
        }
        Console.WriteLine();
    }
}

Console.Clear();
Console.WriteLine($"[{string.Join(", ", array)}]");